{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Simperf","body":"simperf\r\n=======\r\n\r\nSimperf 是一个简单的性能测试工具，它提供了一个多线程测试框架\r\n\r\n<b>Example:</b>\r\n\r\n1. 在代码里使用Simperf\r\n<pre>\r\nSimperf perf = new Simperf(50, 2000, 1000, \r\n    new SimperfThreadFactory() {\r\n        public SimperfThread newThread() {\r\n            return new SimperfThread();\r\n        }\r\n    });\r\n// 设置结果输出文件，默认 simperf-result.log\r\nperf.getMonitorThread().setLogFile(\"simperf.log\");\r\n// 开始性能测试\r\nperf.start();\r\n</pre>\r\n\r\n2. 在命令行里使用Simperf\r\n<pre>\r\npublic class SimperfCommandTest {\r\n\tpublic static void main(String[] args) {\r\n\t    SimperfCommand simCommand = new SimperfCommand(args);\r\n\t    Simperf perf = simCommand.create();\r\n\t\tif (perf == null) {\r\n\t\t\t// 参数解析失败时会返回null\r\n\t\t\tSystem.exit(-1);\r\n\t\t}\r\n\t    perf.start(new SimperfThreadFactory() {\r\n\t        public SimperfThread newThread() {\r\n\t            return new SimperfThread();\r\n\t        }\r\n\t    });\r\n\t}\r\n}\r\n</pre>\r\n执行命令：\r\n<pre>\r\njava SimperfCommandTest -t 10 -c 10 -i 1000\r\n参数说明：\r\nusage: SimperfCommand options\r\n -c,--count <arg>      [*] number of each thread requests count\r\n -i,--interval <arg>   [ ] interval of print messages, default 1000\r\n -j <arg>              [ ] generate jtl report\r\n -l,--log <arg>        [ ] log filename\r\n -m,--maxtps <arg>     [ ] max tps\r\n -t,--thread <arg>     [*] number of thread count\r\n</pre>\r\n3. 在Junit4里使用Simperf\r\n<pre>\r\npublic class SimperfTestCaseTest extends SimperfTestCase {\r\n    private Random              rand;\r\n    @Test\r\n    @Simperf(thread = 2, count = 5, interval = 1000)\r\n    public void testXxx() {\r\n        try {\r\n            Thread.sleep(1000);\r\n        } catch (Exception e) {\r\n        }\r\n        boolean result = rand.nextInt(10) > 1;\r\n        Assert.assertTrue(\"随机生成结果\", result);\r\n    }\r\n}\r\n</pre>\r\n","google":"","tagline":"一个简单的Java性能测试框架"}